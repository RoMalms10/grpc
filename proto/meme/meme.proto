syntax = "proto3";

package meme;
option go_package = "github.com/RoMalms10/grpc/meme";

// MemeService provides endpoints for generating memes
service MemeService {
  // GenerateMeme creates a meme with the given parameters
  rpc GenerateMeme(GenerateMemeRequest) returns (GenerateMemeResponse);

  // ListTemplates returns a list of available meme templates
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse);
}

// GenerateMemeRequest contains parameters for meme generation
message GenerateMemeRequest {
  // Template ID for the meme (e.g., "drake", "distracted-boyfriend")
  string template_id = 1;

  // Text for the top of the meme (optional)
  string top_text = 2;

  // Text for the bottom of the meme (optional)
  string bottom_text = 3;

  // For multi-panel memes, additional text entries
  repeated string additional_text = 4;

  // Whether to use AI to generate caption
  bool use_ai_caption = 5;

  // Optional caption prompt if using AI
  string caption_prompt = 6;
}

message GenerateMemeResponse {
  // Base64-encoded image data
  string image_data = 1;

  // MIME type of the image (e.g., "image/jpeg", "image/png")
  string mime_type = 2;

  // Any captions that were generated by AI
  repeated string generated_captions = 3;

  // Error message if generation failed
  string error = 4;
}

message ListTemplatesRequest {
  // Optional category filter
  string category = 1;
}

message Template {
  // Unique identifier for the template
  string id = 1;

  // Display name for the template
  string name = 2;

  // Number of text fields this template supports
  int32 text_field_count = 3;

  // Category of the meme (e.g., "classic", "trending")
  string category = 4;

  // URL to a preview image of the template
  string preview_url = 5;
}

message ListTemplatesResponse {
  // List of available templates
  repeated Template templates = 1;
}