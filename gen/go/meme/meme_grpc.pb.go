// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: meme/meme.proto

package meme

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemeServiceClient is the client API for MemeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemeServiceClient interface {
	// GenerateMeme creates a meme with the given parameters
	GenerateMeme(ctx context.Context, in *GenerateMemeRequest, opts ...grpc.CallOption) (*GenerateMemeResponse, error)
	// ListTemplates returns a list of available meme templates
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
}

type memeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemeServiceClient(cc grpc.ClientConnInterface) MemeServiceClient {
	return &memeServiceClient{cc}
}

func (c *memeServiceClient) GenerateMeme(ctx context.Context, in *GenerateMemeRequest, opts ...grpc.CallOption) (*GenerateMemeResponse, error) {
	out := new(GenerateMemeResponse)
	err := c.cc.Invoke(ctx, "/meme.MemeService/GenerateMeme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memeServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, "/meme.MemeService/ListTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemeServiceServer is the server API for MemeService service.
// All implementations must embed UnimplementedMemeServiceServer
// for forward compatibility
type MemeServiceServer interface {
	// GenerateMeme creates a meme with the given parameters
	GenerateMeme(context.Context, *GenerateMemeRequest) (*GenerateMemeResponse, error)
	// ListTemplates returns a list of available meme templates
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	mustEmbedUnimplementedMemeServiceServer()
}

// UnimplementedMemeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemeServiceServer struct {
}

func (UnimplementedMemeServiceServer) GenerateMeme(context.Context, *GenerateMemeRequest) (*GenerateMemeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMeme not implemented")
}
func (UnimplementedMemeServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedMemeServiceServer) mustEmbedUnimplementedMemeServiceServer() {}

// UnsafeMemeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemeServiceServer will
// result in compilation errors.
type UnsafeMemeServiceServer interface {
	mustEmbedUnimplementedMemeServiceServer()
}

func RegisterMemeServiceServer(s grpc.ServiceRegistrar, srv MemeServiceServer) {
	s.RegisterService(&MemeService_ServiceDesc, srv)
}

func _MemeService_GenerateMeme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeServiceServer).GenerateMeme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meme.MemeService/GenerateMeme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeServiceServer).GenerateMeme(ctx, req.(*GenerateMemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemeService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemeServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meme.MemeService/ListTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemeServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemeService_ServiceDesc is the grpc.ServiceDesc for MemeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meme.MemeService",
	HandlerType: (*MemeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateMeme",
			Handler:    _MemeService_GenerateMeme_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _MemeService_ListTemplates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meme/meme.proto",
}
